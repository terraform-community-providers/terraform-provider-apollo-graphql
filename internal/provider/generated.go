// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package provider

import (
	"context"
	"encoding/json"

	"github.com/Khan/genqlient/graphql"
)

// Service includes the GraphQL fields of Service requested by the fragment Service.
// The GraphQL type's documentation follows.
//
// A graph in Apollo Studio represents a graph in your organization.
// Each graph has one or more variants, which correspond to the different
// environments where that graph runs (such as staging and production).
// Each variant has its own GraphQL schema, which means schemas can differ between environments.
type Service struct {
	// The graph's globally unique identifier.
	Id string `json:"id"`
	// The graph's name.
	Title                  string `json:"title"`
	OnboardingArchitecture string `json:"onboardingArchitecture"`
	AccountId              string `json:"accountId"`
	Description            string `json:"description"`
}

// GetId returns Service.Id, and is useful for accessing the field via an interface.
func (v *Service) GetId() string { return v.Id }

// GetTitle returns Service.Title, and is useful for accessing the field via an interface.
func (v *Service) GetTitle() string { return v.Title }

// GetOnboardingArchitecture returns Service.OnboardingArchitecture, and is useful for accessing the field via an interface.
func (v *Service) GetOnboardingArchitecture() string { return v.OnboardingArchitecture }

// GetAccountId returns Service.AccountId, and is useful for accessing the field via an interface.
func (v *Service) GetAccountId() string { return v.AccountId }

// GetDescription returns Service.Description, and is useful for accessing the field via an interface.
func (v *Service) GetDescription() string { return v.Description }

// Variant includes the GraphQL fields of GraphVariant requested by the fragment Variant.
// The GraphQL type's documentation follows.
//
// A graph variant
type Variant struct {
	// The variant's global identifier in the form `graphID@variant`.
	Id string `json:"id"`
	// The variant's name (e.g., `staging`).
	Name     string `json:"name"`
	IsPublic bool   `json:"isPublic"`
	// Graph ID of the variant. Prefer using graph { id } when feasible.
	GraphId string `json:"graphId"`
}

// GetId returns Variant.Id, and is useful for accessing the field via an interface.
func (v *Variant) GetId() string { return v.Id }

// GetName returns Variant.Name, and is useful for accessing the field via an interface.
func (v *Variant) GetName() string { return v.Name }

// GetIsPublic returns Variant.IsPublic, and is useful for accessing the field via an interface.
func (v *Variant) GetIsPublic() bool { return v.IsPublic }

// GetGraphId returns Variant.GraphId, and is useful for accessing the field via an interface.
func (v *Variant) GetGraphId() string { return v.GraphId }

// __createServiceInput is used internally by genqlient
type __createServiceInput struct {
	Id                     string `json:"id"`
	Title                  string `json:"title"`
	OnboardingArchitecture string `json:"onboardingArchitecture"`
	AccountId              string `json:"accountId"`
	Description            string `json:"description"`
}

// GetId returns __createServiceInput.Id, and is useful for accessing the field via an interface.
func (v *__createServiceInput) GetId() string { return v.Id }

// GetTitle returns __createServiceInput.Title, and is useful for accessing the field via an interface.
func (v *__createServiceInput) GetTitle() string { return v.Title }

// GetOnboardingArchitecture returns __createServiceInput.OnboardingArchitecture, and is useful for accessing the field via an interface.
func (v *__createServiceInput) GetOnboardingArchitecture() string { return v.OnboardingArchitecture }

// GetAccountId returns __createServiceInput.AccountId, and is useful for accessing the field via an interface.
func (v *__createServiceInput) GetAccountId() string { return v.AccountId }

// GetDescription returns __createServiceInput.Description, and is useful for accessing the field via an interface.
func (v *__createServiceInput) GetDescription() string { return v.Description }

// __createVariantInput is used internally by genqlient
type __createVariantInput struct {
	ServiceId   string `json:"serviceId"`
	VariantName string `json:"variantName"`
}

// GetServiceId returns __createVariantInput.ServiceId, and is useful for accessing the field via an interface.
func (v *__createVariantInput) GetServiceId() string { return v.ServiceId }

// GetVariantName returns __createVariantInput.VariantName, and is useful for accessing the field via an interface.
func (v *__createVariantInput) GetVariantName() string { return v.VariantName }

// __deleteServiceInput is used internally by genqlient
type __deleteServiceInput struct {
	Id string `json:"id"`
}

// GetId returns __deleteServiceInput.Id, and is useful for accessing the field via an interface.
func (v *__deleteServiceInput) GetId() string { return v.Id }

// __deleteVariantInput is used internally by genqlient
type __deleteVariantInput struct {
	ServiceId   string `json:"serviceId"`
	VariantName string `json:"variantName"`
}

// GetServiceId returns __deleteVariantInput.ServiceId, and is useful for accessing the field via an interface.
func (v *__deleteVariantInput) GetServiceId() string { return v.ServiceId }

// GetVariantName returns __deleteVariantInput.VariantName, and is useful for accessing the field via an interface.
func (v *__deleteVariantInput) GetVariantName() string { return v.VariantName }

// __getServiceInput is used internally by genqlient
type __getServiceInput struct {
	Id string `json:"id"`
}

// GetId returns __getServiceInput.Id, and is useful for accessing the field via an interface.
func (v *__getServiceInput) GetId() string { return v.Id }

// __getVariantInput is used internally by genqlient
type __getVariantInput struct {
	ServiceId   string `json:"serviceId"`
	VariantName string `json:"variantName"`
}

// GetServiceId returns __getVariantInput.ServiceId, and is useful for accessing the field via an interface.
func (v *__getVariantInput) GetServiceId() string { return v.ServiceId }

// GetVariantName returns __getVariantInput.VariantName, and is useful for accessing the field via an interface.
func (v *__getVariantInput) GetVariantName() string { return v.VariantName }

// __updateServiceDescriptionInput is used internally by genqlient
type __updateServiceDescriptionInput struct {
	Id          string `json:"id"`
	Description string `json:"description"`
}

// GetId returns __updateServiceDescriptionInput.Id, and is useful for accessing the field via an interface.
func (v *__updateServiceDescriptionInput) GetId() string { return v.Id }

// GetDescription returns __updateServiceDescriptionInput.Description, and is useful for accessing the field via an interface.
func (v *__updateServiceDescriptionInput) GetDescription() string { return v.Description }

// __updateServiceTitleInput is used internally by genqlient
type __updateServiceTitleInput struct {
	Id    string `json:"id"`
	Title string `json:"title"`
}

// GetId returns __updateServiceTitleInput.Id, and is useful for accessing the field via an interface.
func (v *__updateServiceTitleInput) GetId() string { return v.Id }

// GetTitle returns __updateServiceTitleInput.Title, and is useful for accessing the field via an interface.
func (v *__updateServiceTitleInput) GetTitle() string { return v.Title }

// __updateVariantIsPublicInput is used internally by genqlient
type __updateVariantIsPublicInput struct {
	ServiceId   string `json:"serviceId"`
	VariantName string `json:"variantName"`
	IsPublic    bool   `json:"isPublic"`
}

// GetServiceId returns __updateVariantIsPublicInput.ServiceId, and is useful for accessing the field via an interface.
func (v *__updateVariantIsPublicInput) GetServiceId() string { return v.ServiceId }

// GetVariantName returns __updateVariantIsPublicInput.VariantName, and is useful for accessing the field via an interface.
func (v *__updateVariantIsPublicInput) GetVariantName() string { return v.VariantName }

// GetIsPublic returns __updateVariantIsPublicInput.IsPublic, and is useful for accessing the field via an interface.
func (v *__updateVariantIsPublicInput) GetIsPublic() bool { return v.IsPublic }

// createServiceNewService includes the requested fields of the GraphQL type Service.
// The GraphQL type's documentation follows.
//
// A graph in Apollo Studio represents a graph in your organization.
// Each graph has one or more variants, which correspond to the different
// environments where that graph runs (such as staging and production).
// Each variant has its own GraphQL schema, which means schemas can differ between environments.
type createServiceNewService struct {
	Service `json:"-"`
}

// GetId returns createServiceNewService.Id, and is useful for accessing the field via an interface.
func (v *createServiceNewService) GetId() string { return v.Service.Id }

// GetTitle returns createServiceNewService.Title, and is useful for accessing the field via an interface.
func (v *createServiceNewService) GetTitle() string { return v.Service.Title }

// GetOnboardingArchitecture returns createServiceNewService.OnboardingArchitecture, and is useful for accessing the field via an interface.
func (v *createServiceNewService) GetOnboardingArchitecture() string {
	return v.Service.OnboardingArchitecture
}

// GetAccountId returns createServiceNewService.AccountId, and is useful for accessing the field via an interface.
func (v *createServiceNewService) GetAccountId() string { return v.Service.AccountId }

// GetDescription returns createServiceNewService.Description, and is useful for accessing the field via an interface.
func (v *createServiceNewService) GetDescription() string { return v.Service.Description }

func (v *createServiceNewService) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*createServiceNewService
		graphql.NoUnmarshalJSON
	}
	firstPass.createServiceNewService = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.Service)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalcreateServiceNewService struct {
	Id string `json:"id"`

	Title string `json:"title"`

	OnboardingArchitecture string `json:"onboardingArchitecture"`

	AccountId string `json:"accountId"`

	Description string `json:"description"`
}

func (v *createServiceNewService) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *createServiceNewService) __premarshalJSON() (*__premarshalcreateServiceNewService, error) {
	var retval __premarshalcreateServiceNewService

	retval.Id = v.Service.Id
	retval.Title = v.Service.Title
	retval.OnboardingArchitecture = v.Service.OnboardingArchitecture
	retval.AccountId = v.Service.AccountId
	retval.Description = v.Service.Description
	return &retval, nil
}

// createServiceResponse is returned by createService on success.
type createServiceResponse struct {
	NewService createServiceNewService `json:"newService"`
}

// GetNewService returns createServiceResponse.NewService, and is useful for accessing the field via an interface.
func (v *createServiceResponse) GetNewService() createServiceNewService { return v.NewService }

// createVariantResponse is returned by createVariant on success.
type createVariantResponse struct {
	Service createVariantServiceServiceMutation `json:"service"`
}

// GetService returns createVariantResponse.Service, and is useful for accessing the field via an interface.
func (v *createVariantResponse) GetService() createVariantServiceServiceMutation { return v.Service }

// createVariantServiceServiceMutation includes the requested fields of the GraphQL type ServiceMutation.
// The GraphQL type's documentation follows.
//
// Provides access to mutation fields for managing Studio graphs and subgraphs.
type createVariantServiceServiceMutation struct {
	// Publish a schema to this variant, either via a document or an introspection query result.
	UploadSchema createVariantServiceServiceMutationUploadSchemaUploadSchemaMutationResponse `json:"uploadSchema"`
}

// GetUploadSchema returns createVariantServiceServiceMutation.UploadSchema, and is useful for accessing the field via an interface.
func (v *createVariantServiceServiceMutation) GetUploadSchema() createVariantServiceServiceMutationUploadSchemaUploadSchemaMutationResponse {
	return v.UploadSchema
}

// createVariantServiceServiceMutationUploadSchemaUploadSchemaMutationResponse includes the requested fields of the GraphQL type UploadSchemaMutationResponse.
// The GraphQL type's documentation follows.
//
// Describes the result of publishing a schema to a graph variant.
type createVariantServiceServiceMutationUploadSchemaUploadSchemaMutationResponse struct {
	// Whether the schema publish operation succeeded (`true`) or encountered errors (`false`).
	Success bool `json:"success"`
}

// GetSuccess returns createVariantServiceServiceMutationUploadSchemaUploadSchemaMutationResponse.Success, and is useful for accessing the field via an interface.
func (v *createVariantServiceServiceMutationUploadSchemaUploadSchemaMutationResponse) GetSuccess() bool {
	return v.Success
}

// deleteServiceResponse is returned by deleteService on success.
type deleteServiceResponse struct {
	Service deleteServiceServiceServiceMutation `json:"service"`
}

// GetService returns deleteServiceResponse.Service, and is useful for accessing the field via an interface.
func (v *deleteServiceResponse) GetService() deleteServiceServiceServiceMutation { return v.Service }

// deleteServiceServiceServiceMutation includes the requested fields of the GraphQL type ServiceMutation.
// The GraphQL type's documentation follows.
//
// Provides access to mutation fields for managing Studio graphs and subgraphs.
type deleteServiceServiceServiceMutation struct {
	// Soft delete a graph. Data associated with the graph is not permanently deleted; Apollo support can undo.
	Delete interface{} `json:"delete"`
}

// GetDelete returns deleteServiceServiceServiceMutation.Delete, and is useful for accessing the field via an interface.
func (v *deleteServiceServiceServiceMutation) GetDelete() interface{} { return v.Delete }

// deleteVariantResponse is returned by deleteVariant on success.
type deleteVariantResponse struct {
	Service deleteVariantServiceServiceMutation `json:"service"`
}

// GetService returns deleteVariantResponse.Service, and is useful for accessing the field via an interface.
func (v *deleteVariantResponse) GetService() deleteVariantServiceServiceMutation { return v.Service }

// deleteVariantServiceServiceMutation includes the requested fields of the GraphQL type ServiceMutation.
// The GraphQL type's documentation follows.
//
// Provides access to mutation fields for managing Studio graphs and subgraphs.
type deleteVariantServiceServiceMutation struct {
	// Make changes to a graph variant.
	Variant deleteVariantServiceServiceMutationVariantGraphVariantMutation `json:"variant"`
}

// GetVariant returns deleteVariantServiceServiceMutation.Variant, and is useful for accessing the field via an interface.
func (v *deleteVariantServiceServiceMutation) GetVariant() deleteVariantServiceServiceMutationVariantGraphVariantMutation {
	return v.Variant
}

// deleteVariantServiceServiceMutationVariantGraphVariantMutation includes the requested fields of the GraphQL type GraphVariantMutation.
// The GraphQL type's documentation follows.
//
// Modifies a variant of a graph, also called a schema tag in parts of our product.
type deleteVariantServiceServiceMutationVariantGraphVariantMutation struct {
	// Delete the variant.
	Delete deleteVariantServiceServiceMutationVariantGraphVariantMutationDeleteDeleteSchemaTagResult `json:"delete"`
}

// GetDelete returns deleteVariantServiceServiceMutationVariantGraphVariantMutation.Delete, and is useful for accessing the field via an interface.
func (v *deleteVariantServiceServiceMutationVariantGraphVariantMutation) GetDelete() deleteVariantServiceServiceMutationVariantGraphVariantMutationDeleteDeleteSchemaTagResult {
	return v.Delete
}

// deleteVariantServiceServiceMutationVariantGraphVariantMutationDeleteDeleteSchemaTagResult includes the requested fields of the GraphQL type DeleteSchemaTagResult.
// The GraphQL type's documentation follows.
//
// The result of attempting to delete a graph variant.
type deleteVariantServiceServiceMutationVariantGraphVariantMutationDeleteDeleteSchemaTagResult struct {
	// Whether the variant was deleted or not.
	Deleted bool `json:"deleted"`
}

// GetDeleted returns deleteVariantServiceServiceMutationVariantGraphVariantMutationDeleteDeleteSchemaTagResult.Deleted, and is useful for accessing the field via an interface.
func (v *deleteVariantServiceServiceMutationVariantGraphVariantMutationDeleteDeleteSchemaTagResult) GetDeleted() bool {
	return v.Deleted
}

// getServiceResponse is returned by getService on success.
type getServiceResponse struct {
	// Service by ID
	Service getServiceService `json:"service"`
}

// GetService returns getServiceResponse.Service, and is useful for accessing the field via an interface.
func (v *getServiceResponse) GetService() getServiceService { return v.Service }

// getServiceService includes the requested fields of the GraphQL type Service.
// The GraphQL type's documentation follows.
//
// A graph in Apollo Studio represents a graph in your organization.
// Each graph has one or more variants, which correspond to the different
// environments where that graph runs (such as staging and production).
// Each variant has its own GraphQL schema, which means schemas can differ between environments.
type getServiceService struct {
	Service `json:"-"`
}

// GetId returns getServiceService.Id, and is useful for accessing the field via an interface.
func (v *getServiceService) GetId() string { return v.Service.Id }

// GetTitle returns getServiceService.Title, and is useful for accessing the field via an interface.
func (v *getServiceService) GetTitle() string { return v.Service.Title }

// GetOnboardingArchitecture returns getServiceService.OnboardingArchitecture, and is useful for accessing the field via an interface.
func (v *getServiceService) GetOnboardingArchitecture() string {
	return v.Service.OnboardingArchitecture
}

// GetAccountId returns getServiceService.AccountId, and is useful for accessing the field via an interface.
func (v *getServiceService) GetAccountId() string { return v.Service.AccountId }

// GetDescription returns getServiceService.Description, and is useful for accessing the field via an interface.
func (v *getServiceService) GetDescription() string { return v.Service.Description }

func (v *getServiceService) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getServiceService
		graphql.NoUnmarshalJSON
	}
	firstPass.getServiceService = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.Service)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetServiceService struct {
	Id string `json:"id"`

	Title string `json:"title"`

	OnboardingArchitecture string `json:"onboardingArchitecture"`

	AccountId string `json:"accountId"`

	Description string `json:"description"`
}

func (v *getServiceService) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getServiceService) __premarshalJSON() (*__premarshalgetServiceService, error) {
	var retval __premarshalgetServiceService

	retval.Id = v.Service.Id
	retval.Title = v.Service.Title
	retval.OnboardingArchitecture = v.Service.OnboardingArchitecture
	retval.AccountId = v.Service.AccountId
	retval.Description = v.Service.Description
	return &retval, nil
}

// getVariantResponse is returned by getVariant on success.
type getVariantResponse struct {
	// Service by ID
	Service getVariantService `json:"service"`
}

// GetService returns getVariantResponse.Service, and is useful for accessing the field via an interface.
func (v *getVariantResponse) GetService() getVariantService { return v.Service }

// getVariantService includes the requested fields of the GraphQL type Service.
// The GraphQL type's documentation follows.
//
// A graph in Apollo Studio represents a graph in your organization.
// Each graph has one or more variants, which correspond to the different
// environments where that graph runs (such as staging and production).
// Each variant has its own GraphQL schema, which means schemas can differ between environments.
type getVariantService struct {
	// Provides details of the graph variant with the provided `name`, if a variant
	// with that name exists for this graph. Otherwise, returns null.
	//
	// For a list of _all_ variants associated with a graph, use `Graph.variants` instead.
	Variant getVariantServiceVariantGraphVariant `json:"variant"`
}

// GetVariant returns getVariantService.Variant, and is useful for accessing the field via an interface.
func (v *getVariantService) GetVariant() getVariantServiceVariantGraphVariant { return v.Variant }

// getVariantServiceVariantGraphVariant includes the requested fields of the GraphQL type GraphVariant.
// The GraphQL type's documentation follows.
//
// A graph variant
type getVariantServiceVariantGraphVariant struct {
	Variant `json:"-"`
}

// GetId returns getVariantServiceVariantGraphVariant.Id, and is useful for accessing the field via an interface.
func (v *getVariantServiceVariantGraphVariant) GetId() string { return v.Variant.Id }

// GetName returns getVariantServiceVariantGraphVariant.Name, and is useful for accessing the field via an interface.
func (v *getVariantServiceVariantGraphVariant) GetName() string { return v.Variant.Name }

// GetIsPublic returns getVariantServiceVariantGraphVariant.IsPublic, and is useful for accessing the field via an interface.
func (v *getVariantServiceVariantGraphVariant) GetIsPublic() bool { return v.Variant.IsPublic }

// GetGraphId returns getVariantServiceVariantGraphVariant.GraphId, and is useful for accessing the field via an interface.
func (v *getVariantServiceVariantGraphVariant) GetGraphId() string { return v.Variant.GraphId }

func (v *getVariantServiceVariantGraphVariant) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getVariantServiceVariantGraphVariant
		graphql.NoUnmarshalJSON
	}
	firstPass.getVariantServiceVariantGraphVariant = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.Variant)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetVariantServiceVariantGraphVariant struct {
	Id string `json:"id"`

	Name string `json:"name"`

	IsPublic bool `json:"isPublic"`

	GraphId string `json:"graphId"`
}

func (v *getVariantServiceVariantGraphVariant) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getVariantServiceVariantGraphVariant) __premarshalJSON() (*__premarshalgetVariantServiceVariantGraphVariant, error) {
	var retval __premarshalgetVariantServiceVariantGraphVariant

	retval.Id = v.Variant.Id
	retval.Name = v.Variant.Name
	retval.IsPublic = v.Variant.IsPublic
	retval.GraphId = v.Variant.GraphId
	return &retval, nil
}

// updateServiceDescriptionResponse is returned by updateServiceDescription on success.
type updateServiceDescriptionResponse struct {
	Service updateServiceDescriptionServiceServiceMutation `json:"service"`
}

// GetService returns updateServiceDescriptionResponse.Service, and is useful for accessing the field via an interface.
func (v *updateServiceDescriptionResponse) GetService() updateServiceDescriptionServiceServiceMutation {
	return v.Service
}

// updateServiceDescriptionServiceServiceMutation includes the requested fields of the GraphQL type ServiceMutation.
// The GraphQL type's documentation follows.
//
// Provides access to mutation fields for managing Studio graphs and subgraphs.
type updateServiceDescriptionServiceServiceMutation struct {
	UpdateDescription updateServiceDescriptionServiceServiceMutationUpdateDescriptionService `json:"updateDescription"`
}

// GetUpdateDescription returns updateServiceDescriptionServiceServiceMutation.UpdateDescription, and is useful for accessing the field via an interface.
func (v *updateServiceDescriptionServiceServiceMutation) GetUpdateDescription() updateServiceDescriptionServiceServiceMutationUpdateDescriptionService {
	return v.UpdateDescription
}

// updateServiceDescriptionServiceServiceMutationUpdateDescriptionService includes the requested fields of the GraphQL type Service.
// The GraphQL type's documentation follows.
//
// A graph in Apollo Studio represents a graph in your organization.
// Each graph has one or more variants, which correspond to the different
// environments where that graph runs (such as staging and production).
// Each variant has its own GraphQL schema, which means schemas can differ between environments.
type updateServiceDescriptionServiceServiceMutationUpdateDescriptionService struct {
	Service `json:"-"`
}

// GetId returns updateServiceDescriptionServiceServiceMutationUpdateDescriptionService.Id, and is useful for accessing the field via an interface.
func (v *updateServiceDescriptionServiceServiceMutationUpdateDescriptionService) GetId() string {
	return v.Service.Id
}

// GetTitle returns updateServiceDescriptionServiceServiceMutationUpdateDescriptionService.Title, and is useful for accessing the field via an interface.
func (v *updateServiceDescriptionServiceServiceMutationUpdateDescriptionService) GetTitle() string {
	return v.Service.Title
}

// GetOnboardingArchitecture returns updateServiceDescriptionServiceServiceMutationUpdateDescriptionService.OnboardingArchitecture, and is useful for accessing the field via an interface.
func (v *updateServiceDescriptionServiceServiceMutationUpdateDescriptionService) GetOnboardingArchitecture() string {
	return v.Service.OnboardingArchitecture
}

// GetAccountId returns updateServiceDescriptionServiceServiceMutationUpdateDescriptionService.AccountId, and is useful for accessing the field via an interface.
func (v *updateServiceDescriptionServiceServiceMutationUpdateDescriptionService) GetAccountId() string {
	return v.Service.AccountId
}

// GetDescription returns updateServiceDescriptionServiceServiceMutationUpdateDescriptionService.Description, and is useful for accessing the field via an interface.
func (v *updateServiceDescriptionServiceServiceMutationUpdateDescriptionService) GetDescription() string {
	return v.Service.Description
}

func (v *updateServiceDescriptionServiceServiceMutationUpdateDescriptionService) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*updateServiceDescriptionServiceServiceMutationUpdateDescriptionService
		graphql.NoUnmarshalJSON
	}
	firstPass.updateServiceDescriptionServiceServiceMutationUpdateDescriptionService = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.Service)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalupdateServiceDescriptionServiceServiceMutationUpdateDescriptionService struct {
	Id string `json:"id"`

	Title string `json:"title"`

	OnboardingArchitecture string `json:"onboardingArchitecture"`

	AccountId string `json:"accountId"`

	Description string `json:"description"`
}

func (v *updateServiceDescriptionServiceServiceMutationUpdateDescriptionService) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *updateServiceDescriptionServiceServiceMutationUpdateDescriptionService) __premarshalJSON() (*__premarshalupdateServiceDescriptionServiceServiceMutationUpdateDescriptionService, error) {
	var retval __premarshalupdateServiceDescriptionServiceServiceMutationUpdateDescriptionService

	retval.Id = v.Service.Id
	retval.Title = v.Service.Title
	retval.OnboardingArchitecture = v.Service.OnboardingArchitecture
	retval.AccountId = v.Service.AccountId
	retval.Description = v.Service.Description
	return &retval, nil
}

// updateServiceTitleResponse is returned by updateServiceTitle on success.
type updateServiceTitleResponse struct {
	Service updateServiceTitleServiceServiceMutation `json:"service"`
}

// GetService returns updateServiceTitleResponse.Service, and is useful for accessing the field via an interface.
func (v *updateServiceTitleResponse) GetService() updateServiceTitleServiceServiceMutation {
	return v.Service
}

// updateServiceTitleServiceServiceMutation includes the requested fields of the GraphQL type ServiceMutation.
// The GraphQL type's documentation follows.
//
// Provides access to mutation fields for managing Studio graphs and subgraphs.
type updateServiceTitleServiceServiceMutation struct {
	UpdateTitle updateServiceTitleServiceServiceMutationUpdateTitleService `json:"updateTitle"`
}

// GetUpdateTitle returns updateServiceTitleServiceServiceMutation.UpdateTitle, and is useful for accessing the field via an interface.
func (v *updateServiceTitleServiceServiceMutation) GetUpdateTitle() updateServiceTitleServiceServiceMutationUpdateTitleService {
	return v.UpdateTitle
}

// updateServiceTitleServiceServiceMutationUpdateTitleService includes the requested fields of the GraphQL type Service.
// The GraphQL type's documentation follows.
//
// A graph in Apollo Studio represents a graph in your organization.
// Each graph has one or more variants, which correspond to the different
// environments where that graph runs (such as staging and production).
// Each variant has its own GraphQL schema, which means schemas can differ between environments.
type updateServiceTitleServiceServiceMutationUpdateTitleService struct {
	Service `json:"-"`
}

// GetId returns updateServiceTitleServiceServiceMutationUpdateTitleService.Id, and is useful for accessing the field via an interface.
func (v *updateServiceTitleServiceServiceMutationUpdateTitleService) GetId() string {
	return v.Service.Id
}

// GetTitle returns updateServiceTitleServiceServiceMutationUpdateTitleService.Title, and is useful for accessing the field via an interface.
func (v *updateServiceTitleServiceServiceMutationUpdateTitleService) GetTitle() string {
	return v.Service.Title
}

// GetOnboardingArchitecture returns updateServiceTitleServiceServiceMutationUpdateTitleService.OnboardingArchitecture, and is useful for accessing the field via an interface.
func (v *updateServiceTitleServiceServiceMutationUpdateTitleService) GetOnboardingArchitecture() string {
	return v.Service.OnboardingArchitecture
}

// GetAccountId returns updateServiceTitleServiceServiceMutationUpdateTitleService.AccountId, and is useful for accessing the field via an interface.
func (v *updateServiceTitleServiceServiceMutationUpdateTitleService) GetAccountId() string {
	return v.Service.AccountId
}

// GetDescription returns updateServiceTitleServiceServiceMutationUpdateTitleService.Description, and is useful for accessing the field via an interface.
func (v *updateServiceTitleServiceServiceMutationUpdateTitleService) GetDescription() string {
	return v.Service.Description
}

func (v *updateServiceTitleServiceServiceMutationUpdateTitleService) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*updateServiceTitleServiceServiceMutationUpdateTitleService
		graphql.NoUnmarshalJSON
	}
	firstPass.updateServiceTitleServiceServiceMutationUpdateTitleService = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.Service)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalupdateServiceTitleServiceServiceMutationUpdateTitleService struct {
	Id string `json:"id"`

	Title string `json:"title"`

	OnboardingArchitecture string `json:"onboardingArchitecture"`

	AccountId string `json:"accountId"`

	Description string `json:"description"`
}

func (v *updateServiceTitleServiceServiceMutationUpdateTitleService) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *updateServiceTitleServiceServiceMutationUpdateTitleService) __premarshalJSON() (*__premarshalupdateServiceTitleServiceServiceMutationUpdateTitleService, error) {
	var retval __premarshalupdateServiceTitleServiceServiceMutationUpdateTitleService

	retval.Id = v.Service.Id
	retval.Title = v.Service.Title
	retval.OnboardingArchitecture = v.Service.OnboardingArchitecture
	retval.AccountId = v.Service.AccountId
	retval.Description = v.Service.Description
	return &retval, nil
}

// updateVariantIsPublicResponse is returned by updateVariantIsPublic on success.
type updateVariantIsPublicResponse struct {
	Service updateVariantIsPublicServiceServiceMutation `json:"service"`
}

// GetService returns updateVariantIsPublicResponse.Service, and is useful for accessing the field via an interface.
func (v *updateVariantIsPublicResponse) GetService() updateVariantIsPublicServiceServiceMutation {
	return v.Service
}

// updateVariantIsPublicServiceServiceMutation includes the requested fields of the GraphQL type ServiceMutation.
// The GraphQL type's documentation follows.
//
// Provides access to mutation fields for managing Studio graphs and subgraphs.
type updateVariantIsPublicServiceServiceMutation struct {
	// Make changes to a graph variant.
	Variant updateVariantIsPublicServiceServiceMutationVariantGraphVariantMutation `json:"variant"`
}

// GetVariant returns updateVariantIsPublicServiceServiceMutation.Variant, and is useful for accessing the field via an interface.
func (v *updateVariantIsPublicServiceServiceMutation) GetVariant() updateVariantIsPublicServiceServiceMutationVariantGraphVariantMutation {
	return v.Variant
}

// updateVariantIsPublicServiceServiceMutationVariantGraphVariantMutation includes the requested fields of the GraphQL type GraphVariantMutation.
// The GraphQL type's documentation follows.
//
// Modifies a variant of a graph, also called a schema tag in parts of our product.
type updateVariantIsPublicServiceServiceMutationVariantGraphVariantMutation struct {
	UpdateVariantIsPublic updateVariantIsPublicServiceServiceMutationVariantGraphVariantMutationUpdateVariantIsPublicGraphVariant `json:"updateVariantIsPublic"`
}

// GetUpdateVariantIsPublic returns updateVariantIsPublicServiceServiceMutationVariantGraphVariantMutation.UpdateVariantIsPublic, and is useful for accessing the field via an interface.
func (v *updateVariantIsPublicServiceServiceMutationVariantGraphVariantMutation) GetUpdateVariantIsPublic() updateVariantIsPublicServiceServiceMutationVariantGraphVariantMutationUpdateVariantIsPublicGraphVariant {
	return v.UpdateVariantIsPublic
}

// updateVariantIsPublicServiceServiceMutationVariantGraphVariantMutationUpdateVariantIsPublicGraphVariant includes the requested fields of the GraphQL type GraphVariant.
// The GraphQL type's documentation follows.
//
// A graph variant
type updateVariantIsPublicServiceServiceMutationVariantGraphVariantMutationUpdateVariantIsPublicGraphVariant struct {
	Variant `json:"-"`
}

// GetId returns updateVariantIsPublicServiceServiceMutationVariantGraphVariantMutationUpdateVariantIsPublicGraphVariant.Id, and is useful for accessing the field via an interface.
func (v *updateVariantIsPublicServiceServiceMutationVariantGraphVariantMutationUpdateVariantIsPublicGraphVariant) GetId() string {
	return v.Variant.Id
}

// GetName returns updateVariantIsPublicServiceServiceMutationVariantGraphVariantMutationUpdateVariantIsPublicGraphVariant.Name, and is useful for accessing the field via an interface.
func (v *updateVariantIsPublicServiceServiceMutationVariantGraphVariantMutationUpdateVariantIsPublicGraphVariant) GetName() string {
	return v.Variant.Name
}

// GetIsPublic returns updateVariantIsPublicServiceServiceMutationVariantGraphVariantMutationUpdateVariantIsPublicGraphVariant.IsPublic, and is useful for accessing the field via an interface.
func (v *updateVariantIsPublicServiceServiceMutationVariantGraphVariantMutationUpdateVariantIsPublicGraphVariant) GetIsPublic() bool {
	return v.Variant.IsPublic
}

// GetGraphId returns updateVariantIsPublicServiceServiceMutationVariantGraphVariantMutationUpdateVariantIsPublicGraphVariant.GraphId, and is useful for accessing the field via an interface.
func (v *updateVariantIsPublicServiceServiceMutationVariantGraphVariantMutationUpdateVariantIsPublicGraphVariant) GetGraphId() string {
	return v.Variant.GraphId
}

func (v *updateVariantIsPublicServiceServiceMutationVariantGraphVariantMutationUpdateVariantIsPublicGraphVariant) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*updateVariantIsPublicServiceServiceMutationVariantGraphVariantMutationUpdateVariantIsPublicGraphVariant
		graphql.NoUnmarshalJSON
	}
	firstPass.updateVariantIsPublicServiceServiceMutationVariantGraphVariantMutationUpdateVariantIsPublicGraphVariant = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.Variant)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalupdateVariantIsPublicServiceServiceMutationVariantGraphVariantMutationUpdateVariantIsPublicGraphVariant struct {
	Id string `json:"id"`

	Name string `json:"name"`

	IsPublic bool `json:"isPublic"`

	GraphId string `json:"graphId"`
}

func (v *updateVariantIsPublicServiceServiceMutationVariantGraphVariantMutationUpdateVariantIsPublicGraphVariant) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *updateVariantIsPublicServiceServiceMutationVariantGraphVariantMutationUpdateVariantIsPublicGraphVariant) __premarshalJSON() (*__premarshalupdateVariantIsPublicServiceServiceMutationVariantGraphVariantMutationUpdateVariantIsPublicGraphVariant, error) {
	var retval __premarshalupdateVariantIsPublicServiceServiceMutationVariantGraphVariantMutationUpdateVariantIsPublicGraphVariant

	retval.Id = v.Variant.Id
	retval.Name = v.Variant.Name
	retval.IsPublic = v.Variant.IsPublic
	retval.GraphId = v.Variant.GraphId
	return &retval, nil
}

func createService(
	ctx context.Context,
	client graphql.Client,
	id string,
	title string,
	onboardingArchitecture string,
	accountId string,
	description string,
) (*createServiceResponse, error) {
	req := &graphql.Request{
		OpName: "createService",
		Query: `
mutation createService ($id: ID!, $title: String!, $onboardingArchitecture: OnboardingArchitecture!, $accountId: ID!, $description: String) {
	newService(id: $id, title: $title, onboardingArchitecture: $onboardingArchitecture, accountId: $accountId, description: $description) {
		... Service
	}
}
fragment Service on Service {
	id
	title
	onboardingArchitecture
	accountId
	description
}
`,
		Variables: &__createServiceInput{
			Id:                     id,
			Title:                  title,
			OnboardingArchitecture: onboardingArchitecture,
			AccountId:              accountId,
			Description:            description,
		},
	}
	var err error

	var data createServiceResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func createVariant(
	ctx context.Context,
	client graphql.Client,
	serviceId string,
	variantName string,
) (*createVariantResponse, error) {
	req := &graphql.Request{
		OpName: "createVariant",
		Query: `
mutation createVariant ($serviceId: ID!, $variantName: String!) {
	service(id: $serviceId) {
		uploadSchema(tag: $variantName, schemaDocument: "scalar JSON") {
			success
		}
	}
}
`,
		Variables: &__createVariantInput{
			ServiceId:   serviceId,
			VariantName: variantName,
		},
	}
	var err error

	var data createVariantResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func deleteService(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*deleteServiceResponse, error) {
	req := &graphql.Request{
		OpName: "deleteService",
		Query: `
mutation deleteService ($id: ID!) {
	service(id: $id) {
		delete
	}
}
`,
		Variables: &__deleteServiceInput{
			Id: id,
		},
	}
	var err error

	var data deleteServiceResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func deleteVariant(
	ctx context.Context,
	client graphql.Client,
	serviceId string,
	variantName string,
) (*deleteVariantResponse, error) {
	req := &graphql.Request{
		OpName: "deleteVariant",
		Query: `
mutation deleteVariant ($serviceId: ID!, $variantName: String!) {
	service(id: $serviceId) {
		variant(name: $variantName) {
			delete {
				deleted
			}
		}
	}
}
`,
		Variables: &__deleteVariantInput{
			ServiceId:   serviceId,
			VariantName: variantName,
		},
	}
	var err error

	var data deleteVariantResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func getService(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*getServiceResponse, error) {
	req := &graphql.Request{
		OpName: "getService",
		Query: `
query getService ($id: ID!) {
	service(id: $id) {
		... Service
	}
}
fragment Service on Service {
	id
	title
	onboardingArchitecture
	accountId
	description
}
`,
		Variables: &__getServiceInput{
			Id: id,
		},
	}
	var err error

	var data getServiceResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func getVariant(
	ctx context.Context,
	client graphql.Client,
	serviceId string,
	variantName string,
) (*getVariantResponse, error) {
	req := &graphql.Request{
		OpName: "getVariant",
		Query: `
query getVariant ($serviceId: ID!, $variantName: String!) {
	service(id: $serviceId) {
		variant(name: $variantName) {
			... Variant
		}
	}
}
fragment Variant on GraphVariant {
	id
	name
	isPublic
	graphId
}
`,
		Variables: &__getVariantInput{
			ServiceId:   serviceId,
			VariantName: variantName,
		},
	}
	var err error

	var data getVariantResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func updateServiceDescription(
	ctx context.Context,
	client graphql.Client,
	id string,
	description string,
) (*updateServiceDescriptionResponse, error) {
	req := &graphql.Request{
		OpName: "updateServiceDescription",
		Query: `
mutation updateServiceDescription ($id: ID!, $description: String!) {
	service(id: $id) {
		updateDescription(description: $description) {
			... Service
		}
	}
}
fragment Service on Service {
	id
	title
	onboardingArchitecture
	accountId
	description
}
`,
		Variables: &__updateServiceDescriptionInput{
			Id:          id,
			Description: description,
		},
	}
	var err error

	var data updateServiceDescriptionResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func updateServiceTitle(
	ctx context.Context,
	client graphql.Client,
	id string,
	title string,
) (*updateServiceTitleResponse, error) {
	req := &graphql.Request{
		OpName: "updateServiceTitle",
		Query: `
mutation updateServiceTitle ($id: ID!, $title: String!) {
	service(id: $id) {
		updateTitle(title: $title) {
			... Service
		}
	}
}
fragment Service on Service {
	id
	title
	onboardingArchitecture
	accountId
	description
}
`,
		Variables: &__updateServiceTitleInput{
			Id:    id,
			Title: title,
		},
	}
	var err error

	var data updateServiceTitleResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func updateVariantIsPublic(
	ctx context.Context,
	client graphql.Client,
	serviceId string,
	variantName string,
	isPublic bool,
) (*updateVariantIsPublicResponse, error) {
	req := &graphql.Request{
		OpName: "updateVariantIsPublic",
		Query: `
mutation updateVariantIsPublic ($serviceId: ID!, $variantName: String!, $isPublic: Boolean!) {
	service(id: $serviceId) {
		variant(name: $variantName) {
			updateVariantIsPublic(isPublic: $isPublic) {
				... Variant
			}
		}
	}
}
fragment Variant on GraphVariant {
	id
	name
	isPublic
	graphId
}
`,
		Variables: &__updateVariantIsPublicInput{
			ServiceId:   serviceId,
			VariantName: variantName,
			IsPublic:    isPublic,
		},
	}
	var err error

	var data updateVariantIsPublicResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
